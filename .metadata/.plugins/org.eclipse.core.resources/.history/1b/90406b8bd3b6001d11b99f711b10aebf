/**
 * 
 */
package com.smart.controller;

import java.awt.print.Pageable;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.annotation.JsonCreator.Mode;
import com.smart.dao.ContactRepository;
import com.smart.dao.UserRepository;
import com.smart.entities.Contact;
import com.smart.entities.User;
import com.smart.helper.Message;

import jakarta.servlet.http.HttpSession;



/**
 * @author piyus
 *
 */

@Controller
@RequestMapping("/user")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private ContactRepository contactRepository;
	
	//method for adding common data to response
	@ModelAttribute
	public void addCommonData(Model model,Principal principal) {
		String userName = principal.getName();
		System.out.println("Username : "+userName);
		//get the user using username(Email)
		
		User user = userRepository.getUserByUserName(userName);
		System.out.println("USER : "+user);
		
		model.addAttribute("user",user);
	}
	
	
	//dashboard home
	@RequestMapping("/index")
	public String dashboard(Model model,Principal principal) {
		
		model.addAttribute("title","User Dashboard");
		
		return "normal/user_dashboard";
	}
	
	//Open add form handler
	@GetMapping("/add-contact")
	public String openAddContactForm(Model model) {
		
		model.addAttribute("title","Add Contact");
		model.addAttribute("contact", new Contact());
		
		return "normal/add_contact_form";
	}
	
	//processing add contact form
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact,
			@RequestParam("profileImage") MultipartFile file, 
			Principal principal,HttpSession session,Model model) {
		
		try {
			String name = principal.getName();
			User user = this.userRepository.getUserByUserName(name);
			
			//processing and uploading file..
			
			if(file.isEmpty()) {
				//if the file is empty then our message
				System.out.println("File is Empty");
			}else {
				//file the file to floder and update the name to contact
				contact.setImage(file.getOriginalFilename());
				
				File saveFile = new ClassPathResource("static/img").getFile();
				Path path = Paths.get(saveFile.getAbsolutePath()+File.separator+file.getOriginalFilename());
				Files.copy(file.getInputStream(),path, StandardCopyOption.REPLACE_EXISTING);
				
				System.out.println("Image is uploaded");
			}
			
			
			contact.setUser(user);
			user.getContacts().add(contact);
			
			
			
			
			this.userRepository.save(user);
			System.out.println("Contact added to User");
			
			//Message sucess
			//session.setAttribute("message",new Message("Your contact is added !!", "success"));
			Message m = new Message("Contact Added!!","alert-success");
			model.addAttribute("message",m);
			
			System.out.println("Contact : "+ contact);
		} catch (Exception e) {
			System.out.println("ERROR : "+e.getMessage());
			e.printStackTrace();
			
			//Message error
			//session.setAttribute("message",new Message("Something went wrong !!"+e.getMessage(), "danger"));
			Message m = new Message("Something Went wrong!!"+e.getMessage(),"alert-danger");
			model.addAttribute("message",m);
		}
		
		return "normal/add_contact_form"; 
	}
	
	
	//show contacts handler
	//per page = 5[n]
	//current page = 0[page]
	@GetMapping("/show-contacts/{page}")
	public String showContacts(@PathVariable("page") Integer page, Model model,Principal principal) {
		
		model.addAttribute("title","Show Contacts");
		String userName = principal.getName();
		User user = this.userRepository.getUserByUserName(userName);
		
		Pageable pageable = (Pageable) PageRequest.of(page, 5);
		
		
		Page<Contact> contacts = this.contactRepository.findContactsByUser(user.getId(),pageable);
		
		model.addAttribute("contacts",contacts);
		model.addAttribute("currentPage",page);
		model.addAttribute("totalPages",contacts.getTotalPages());
		
		return "normal/show_contacts";
	}
	
	

}
